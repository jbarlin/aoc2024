diff --git a/shared/Point.h b/shared/Point.h
index e19172d..0934fd7 100644
--- a/shared/Point.h
+++ b/shared/Point.h
@@ -7,176 +7,47 @@
 
 template<int N> class Point : public std::vector<__int64> {
 public:
-    Point(std::initializer_list<__int64> il) : std::vector<__int64>(il) { resize(N); }
-    Point() { resize(N); }
-    Point(const Point& other) { resize(N); Assign(other); }
-
-    const Point& operator=(const Point& other) { Assign(other); return *this; }
-    void operator+=(const Point& other) { for (int c = 0; c < N; ++c) { at(c) += other.at(c); } }
-    void operator-=(const Point& other) { for (int c = 0; c < N; ++c) { at(c) -= other.at(c); } }
-    void operator*=(__int64 x) { for (int c = 0; c < N; ++c) { at(c) *= x; } }
-    void operator/=(__int64 x) { for (int c = 0; c < N; ++c) { at(c) /= x; } }
-    bool operator <(const Point& other)
-    { 
-        for (int i = 0; i < N; ++i) {
-            if (at[i] < at[i]) return true;
-            if (at[i] > at[i]) return false;
-        }
-        return false;
-    }
+    Point(std::initializer_list<__int64> il);
+    Point();
+    Point(const Point& other);
 
-    void Assign(const Point& other)
-    {
-        for (int i = 0; i < N; ++i) {
-            at(i) = other.at(i);
-        }
-    }
+    const Point& operator=(const Point& other);
+    void operator+=(const Point& other);
+    void operator-=(const Point& other);
+    void operator*=(__int64 x);
+    void operator/=(__int64 x);
+    bool operator <(const Point& other);
 
-    Point Clamp(__int64 c) const {
-        Point clamped;
-        for (int i = 0; i < N; ++i) {
-            clamped.at(i) = std::min(std::max(at(i), -c), c);
-        }
-        return clamped;
-    }
+    void Assign(const Point& other);
+
+    Point Clamp(__int64 c) const;
 
     template<class _F>
-    void DoNeighbours(_F fn) const
-    {
-        Point d;
-        for (auto& x : d) x = -1;
-
-        while (true) {
-            if (!std::all_of(d.begin(), d.end(), [](__int64 a) {return a == 0; })) {
-                fn((*this) + d);
-            }
-            
-            int c = 0;
-            while (c < N) {
-                ++d[c];
-                if (d[c] != 2) break;
-                d[c] = -1;
-                ++c;
-            }
-            if (c == N) break;
-        }
-    }
+    void DoNeighbours(_F fn) const;
 
     template<class _F>
-    void DoSquareNeighbours(_F fn) const
-    {
-        Point x(*this);
-        for (int axis = 0; axis < N; ++axis)
-        {
-            --x.at(axis);
-            fn(x);
-            ++x.at(axis);
-            ++x.at(axis);
-            fn(x);
-            --x.at(axis);
-        }
-    }
+    void DoSquareNeighbours(_F fn) const;
 };
 
-template<int N> Point<N> operator+ (const Point<N>& a, const Point<N>& b) { Point<N> p(a); p += b; return p; }
-template<int N> Point<N> operator- (const Point<N>& a, const Point<N>& b) { Point<N> p(a); p -= b; return p; }
-template<int N> Point<N> operator- (const Point<N>& a) { Point<N> p; p -= a; return p; }
-template<int N> Point<N> operator* (const Point<N>& a, __int64 x) { Point<N> p(a); p *= x; return p; }
-template<int N> Point<N> operator/ (const Point<N>& a, __int64 x) { Point<N> p(a); p /= x; return p; }
-template<int N> std::ostream& operator<< (std::ostream& os, const Point<N>& p)
-{
-    os << "(" << p.at(0);
-    for (int i = 1; i < N; ++i) {
-        os << ", " << p.at(i);
-    }
-    os << ")";
-
-    return os;
-}
-
-template<int N> std::istream& operator>> (std::istream& is, Point<N>& p)
-{
-   if (is.flags() && std::ios::skipws) {
-        while (isspace(is.peek())) {
-            is.ignore();
-        }
-    }
-
-    bool brace = false;
-    if (is.peek() == '(') {
-        is.ignore();
-        brace = true;
-    }
+template<int N> Point<N> operator+ (const Point<N>& a, const Point<N>& b);
+template<int N> Point<N> operator- (const Point<N>& a, const Point<N>& b);
+template<int N> Point<N> operator- (const Point<N>& a);
+template<int N> Point<N> operator* (const Point<N>& a, __int64 x);
+template<int N> Point<N> operator/ (const Point<N>& a, __int64 x);
+template<int N> std::ostream& operator<< (std::ostream& os, const Point<N>& p);
 
-    int c = 1;
-
-    is >> p.at(0);
-
-    while (c < N) {
-        while (isspace(is.peek())) {
-            is.ignore();
-        }
-        if (is.peek() != ',') {
-            is.setstate(std::ios::failbit);
-            return is;
-        }
-        is.ignore();
-
-        is >> p.at(c);
-        ++c;
-    }
-
-    if (brace) {
-        if (is.flags() && std::ios::skipws) {
-            while (isspace(is.peek())) {
-                is.ignore();
-            }
-        }
-
-        if (is.peek() != '(') {
-            is.setstate(std::ios::failbit);
-            return is;
-        }
-        is.ignore();
-    }
-
-    return is;
-}
+template<int N> std::istream& operator>> (std::istream& is, Point<N>& p);
 
 // Manhattan distance
 template<int N>
-__int64 Dist(const Point<N>& p1, const Point<N>& p2) {
-    __int64 sum = 0;
-    for (int i = 0; i < N; ++i) {
-        sum += abs(p1[i] - p2[i]);
-    }
-    return sum;
-}
+__int64 Dist(const Point<N>& p1, const Point<N>& p2);
 
 // Do something for every point on a line.  incl_end indicates whether to call for end point or not
 template<int N, class _F>
-void DoLine(const Point<N>& p1, const Point<N>& p2, _F fn, bool incl_end = true) {
-    Point<N> pos(p1);
-    while (pos != p2) {
-        fn(pos);
-        pos += (p2 - pos).Clamp(1);
-    }
-    if (incl_end) {
-        fn(pos);
-    }
-}
+void DoLine(const Point<N>& p1, const Point<N>& p2, _F fn, bool incl_end = true);
 
 template<class Iterator, class _F>
-void DoLines(Iterator begin, Iterator end, _F fn) {
-    auto pos = *begin;
-    ++begin;
-    while (begin != end) {
-        DoLine(pos, *begin, fn, false);
-        pos = *begin;
-        ++begin;
-    }
-    fn(pos);
-}
+void DoLines(Iterator begin, Iterator end, _F fn);
 
 typedef Point<2> Point2;
 typedef Point<3> Point3;
@@ -224,17 +95,11 @@ namespace P2
         }
     );
 
-    __int64 Cross(const Point2& p1, const Point2& p2) {
-        return p1[0] * p2[1] - p1[1] * p2[0];
-    }
+    __int64 Cross(const Point2& p1, const Point2& p2);
 
-    Point2 TurnRight(const Point2& p) {
-        return Point2({ -p[1], p[0] });
-    }
+    Point2 TurnRight(const Point2& p);
 
-    Point2 TurnLeft(const Point2& p) {
-        return Point2({ p[1], -p[0] });
-    }
+    Point2 TurnLeft(const Point2& p);
 }
 
 namespace P3
@@ -243,7 +108,5 @@ namespace P3
     const Point3 Y({ 0, 1, 0 });
     const Point3 Z({ 0, 0, 1 });
 
-    Point3 Cross(const Point3& p1, const Point3& p2) {
-        return Point3({ p1[1] * p2[2] - p1[2] * p2[1], p1[2] * p2[0] - p1[0] * p2[2], p1[0] * p2[1] - p1[1] * p2[2] });
-    }
+    Point3 Cross(const Point3& p1, const Point3& p2);
 }
\ No newline at end of file
diff --git a/shared/Rect.h b/shared/Rect.h
index 3d558c2..eb9a46e 100644
--- a/shared/Rect.h
+++ b/shared/Rect.h
@@ -13,221 +13,72 @@ private:
     static Point<N> ONE;
     static int PTS;
 
-    void Normalise() {
-        for (int i = 0; i < N; ++i) {
-            if (m_start[i] > m_end[i]) {
-                std::swap(m_start[i], m_end[i]);
-                --m_start[i];
-                ++m_end[i];
-            }
-        }
-    }
+    void Normalise();
 
 public:
-    Rect() {}
-    Rect(const Point<N>& one) :
-        m_start(one), m_end(one + ONE)
-    {}
-
-    Rect(const Point<N>& start, const Point<N>& end) :
-        m_start(start), m_end(end)
-    {
-        Normalise();
-    }
-    static Rect Inclusive(const Point<N>& start, const Point<N>& end)
-    {
-        return Rect(start, end + ONE);
-    }
-
-    bool Contains(const Point<N>& p) const
-    {
-        for (int i = 0; i < N; ++i) {
-            if (p[i] < m_start[i]) return false;
-            if (p[i] >= m_end[i]) return false;
-        }
-        return true;
-    }
+    Rect();
+    Rect(const Point<N>& one);
+
+    Rect(const Point<N>& start, const Point<N>& end);
+    static Rect Inclusive(const Point<N>& start, const Point<N>& end);
+
+    bool Contains(const Point<N>& p) const;
 
     // Rect contains can line up ends
-    bool Contains(const Rect<N>& r) const
-    {
-        for (int i = 0; i < N; ++i) {
-            if (r.m_start[i] < m_start[i]) return false;
-            if (r.m_end[i] > m_end[i]) return false;
-        }
-        return true;
-    }
-
-    const Point<N>& start() const
-    {
-        return m_start;
-    }
-
-    const Point<N>& end() const
-    {
-        return m_end;
-    }
-
-    const Point<N>& incend() const
-    {
-        return end - ONE;
-    }
-
-    Point<N> Length() const
-    {
-        return m_end - m_start;
-    }
-
-    __int64 Size() const
-    {
-        __int64 area = 1;
-        for (int i = 0; i < N; ++i) {
-            area *= (m_end[i] - m_start[i]);
-        }
-
-        return area;
-    }
-
-    bool operator==(const Rect<N>& other) const 
-    {
-        return (m_start == other.m_start && m_end == other.m_end);
-    }
-
-    bool operator<(const Rect<N>& other) const
-    {
-        if (m_start < other.m_start) return true;
-        if (m_start > other.m_start) return false;
-        return m_end < other.m_end;
-    }
-
-    Rect<N> ExpandTo(const Point<N>& pt) const
-    {
-        Rect<N> ret;
-        for (int i = 0; i < N; ++i) {
-            ret.m_start[i] = std::min(m_start[i], pt[i]);
-            ret.m_end[i] = std::max(m_end[i], pt[i] + 1);
-        }
-        return ret;
-    }
-
-    Rect<N> ExpandBy(int increase) const
-    {
-        Rect<N> ret;
-        for (int i = 0; i < N; ++i) {
-            ret.m_start[i] = m_start[i] - increase;
-            ret.m_end[i] += m_end[i] + increase;
-        }
-        return ret;
-    }
-
-    Rect<N> Bound(const Rect<N>& other) const
-    {
-        Rect<N> ret;
-        for (int i = 0; i < N; ++i) {
-            ret.m_start[i] = std::min(m_start[i], other.m_start[i]);
-            ret.m_end[i] = std::max(m_end[i], other.m_end[i]);
-        }
-        return ret;
-    }
+    bool Contains(const Rect<N>& r) const;
+
+    const Point<N>& start() const;
+
+    const Point<N>& end() const;
+
+    const Point<N>& incend() const;
+
+    Point<N> Length() const;
+
+    __int64 Size() const;
+
+    bool operator==(const Rect<N>& other) const ;
+
+    bool operator<(const Rect<N>& other) const;
+
+    Rect<N> ExpandTo(const Point<N>& pt) const;
+
+    Rect<N> ExpandBy(int increase) const;
+
+    Rect<N> Bound(const Rect<N>& other) const;
 
     template<class Iterator>
-    static Rect<N> BoundOf(Iterator begin, Iterator end) {
-        if (begin == end) return Rect<N>();
-
-        Rect<N> ret = *begin;
-        ++begin;
-        while (begin != end) {
-            ret = ret.ExpandTo(*begin);
-            ++begin;
-        }
-        return ret;
-    }
-
-    __int64 BoundSize(const Rect<N>& other) const
-    {
-        __int64 area = 1;
-        for (int i = 0; i < N; ++i) {
-            area *= (std::max(m_end[i], other.m_end[i]) - std::min(m_start[i], other.m_start[i]));
-        }
-
-        return area;
-    }
-
-    Rect<N> Intersect(const Rect<N>& other) const
-    {
-        Rect<N> ret;
-        for (int i = 0; i < N; ++i) {
-            ret.m_start[i] = std::max(m_start[i], other.m_start[i]);
-            ret.m_end[i] = std::max(ret.m_start[i], std::min(m_end[i], other.m_end[i]));
-        }
-        return ret;
-    }
-
-    bool Intersects(const Rect<N>& other) const
-    {
-        return Intersect(other).Size() > 0;
-    }
+    static Rect<N> BoundOf(Iterator begin, Iterator end);
+
+    __int64 BoundSize(const Rect<N>& other) const;
+
+    Rect<N> Intersect(const Rect<N>& other) const;
+
+    bool Intersects(const Rect<N>& other) const;
 
     template<class _F>
-    void DoCorners(_F fn) const
-    {
-        for (int i = 0; i < PTS; ++i) {
-            Point<N> p;
-            for (int j = 0; j < N; ++j) {
-                if (i & (1 << j)) {
-                    p[j] = m_end[j];
-                }
-                else {
-                    p[j] = m_start[j];
-                }
-
-                fn(p);
-            }
-        }
-    }
+    void DoCorners(_F fn) const;
 };
 
 template<int N>
-Rect<N> Bound(const Rect<N>& a, const Rect<N>& b)
-{
-    return a.Bound(b);
-}
+Rect<N> Bound(const Rect<N>& a, const Rect<N>& b);
 
 template<int N>
-__int64 BoundSize(const Rect<N>& a, const Rect<N>& b)
-{
-    return a.BoundSize(b);
-}
+__int64 BoundSize(const Rect<N>& a, const Rect<N>& b);
 
 template<int N>
-Rect<N> Intersect(const Rect<N>& a, const Rect<N>& b)
-{
-    return a.Intersect(b);
-}
+Rect<N> Intersect(const Rect<N>& a, const Rect<N>& b);
 
 template<int N>
-Rect<N> Intersects(const Rect<N>& a, const Rect<N>& b)
-{
-    return a.Intersects(b);
-}
+Rect<N> Intersects(const Rect<N>& a, const Rect<N>& b);
 
 template<int N>
-Point<N> Rect<N>::ONE = [] {
-    Point<N> one;
-    for (int i = 0; i < N; ++i) one[i] = 1;
-    return one;
-}();
+Point<N> Rect<N>::ONE;
 
 template<int N>
-int Rect<N>::PTS = 1 << N;
-
-template<int N> std::ostream& operator<< (std::ostream& os, const Rect<N>& r)
-{
-    os << "[" << r.start() << "-" << r.end() << "]";
-    return os;
-}
-
+int Rect<N>::PTS;
 
+template<int N> std::ostream& operator<< (std::ostream& os, const Rect<N>& r);
 
 typedef Rect<2> Rect2;
 typedef Rect<3> Rect3;
\ No newline at end of file
diff --git a/shared/Split.h b/shared/Split.h
index ae836b8..7cca017 100644
--- a/shared/Split.h
+++ b/shared/Split.h
@@ -9,95 +9,30 @@
 
 // trim from start
 [[nodiscard]]
-static inline std::string ltrim(const std::string& s) {
-    std::string r(s);
-    r.erase(r.begin(), std::find_if(r.begin(), r.end(), [](unsigned char ch) {
-        return !std::isspace(ch);
-        }));
-    return r;
-}
+static inline std::string ltrim(const std::string& s);
 
 // trim from end
 [[nodiscard]]
-static inline std::string rtrim(const std::string& s) {
-    std::string r(s);
-    r.erase(std::find_if(r.rbegin(), r.rend(), [](unsigned char ch) {
-        return !std::isspace(ch);
-        }).base(), r.end());
-    return r;
-}
+static inline std::string rtrim(const std::string& s);
 
 // trim from both ends
 [[nodiscard]]
-static inline std::string trim(const std::string& s) {
-    return ltrim(rtrim(s));
-}
+static inline std::string trim(const std::string& s);
 
 template<class _F>
-void Split(const std::string& s, _F fn, char tok = ',')
-{
-    std::istringstream iss(s);
-    std::string n;
+void Split(const std::string& s, _F fn, char tok = ',');
 
-    while (getline(iss, n, tok)) {
-        fn(trim(n));
-    }
-}
+std::vector<std::string> Split(const std::string& s, char tok = ',');
 
-std::vector<std::string> Split(const std::string& s, char tok = ',')
-{
-    std::vector<std::string> r;
-    Split(s, [&](std::string&& x) {
-        r.push_back(x);
-        }, tok);
-    return r;
-}
 
+std::vector<int> SplitInts(const std::string& s, char tok = ',');
 
-std::vector<int> SplitInts(const std::string& s, char tok = ',')
-{
-    std::vector<int> r;
-    Split(s, [&](std::string&& x) {
-        if (!x.empty()) {
-            r.push_back(stoi(x));
-        }
-        }, tok);
-    return r;
-}
 
-
-std::vector<__int64> SplitInt64s(const std::string& s, char tok = ',')
-{
-    std::vector<__int64> r;
-    Split(s, [&](std::string&& x) {
-        if (!x.empty()) {
-            r.push_back(stoll(x));
-        }
-        }, tok);
-    return r;
-}
+std::vector<__int64> SplitInt64s(const std::string& s, char tok = ',');
 
 
 template<class _F>
-void Split(const std::string& s, _F fn, const std::string& tok = "->")
-{
-    std::string buf(s);
-    auto p = buf.find(tok);
-    while (p != -1) {
-        fn(trim(buf.substr(0, p)));
-        buf = buf.substr(p + tok.length());
-        p = buf.find(tok);
-    }
-
-    fn(trim(buf));
-}
+void Split(const std::string& s, _F fn, const std::string& tok = "->");
 
-std::vector<std::string> Split(const std::string& s, const std::string& tok)
-{
-    std::vector<std::string> r;
-    Split(s, [&](std::string&& x) {
-        r.push_back(x);
-        }, tok);
-    return r;
-}
+std::vector<std::string> Split(const std::string& s, const std::string& tok);
 
